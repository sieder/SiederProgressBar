{"version":3,"sources":["components/progress-bar/progressbar.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Track","styled","div","Thumb","props","percentage","ProgressBar","console","log","AppWrapper","ProgressBarContainer","ButtonContainer","App","useState","setPercentage","percentageLimits","min","value","max","Math","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6zBAIA,IAAMA,EAAQC,IAAOC,IAAV,KAaLC,EAAQF,IAAOC,IAAV,KACE,SAAAE,GAAK,OAAIA,EAAMC,cA0BbC,EAhBK,SAAAF,GAEhB,OADAG,QAAQC,IAAIJ,EAAMC,YAEd,kBAACL,EAAD,KACI,kBAACG,EAAD,CAAOE,WAAYD,EAAMC,YACpBD,EAAMC,WADX,O,wYC1BZ,IAAMI,EAAaR,IAAOC,IAAV,KAKVQ,EAAuBT,IAAOC,IAAV,KAIpBS,EAAkBV,IAAOC,IAAV,KA0BNU,EApBH,WAAO,IAAD,EACoBC,mBAAS,IAD7B,mBACTR,EADS,KACGS,EADH,KAEVC,EAAmB,SAACC,EAAKC,EAAOC,GACpC,OAAOC,KAAKH,IAAIG,KAAKD,IAAIF,EAAKC,GAAQC,IAIxC,OACE,kBAACT,EAAD,KACE,kBAACE,EAAD,KACE,4BAAQS,QAJI,kBAAMN,EAAcC,EAAiB,EAAGV,EAAa,GAAI,QAIrE,KACA,4BAAQe,QANI,kBAAMN,EAAcC,EAAiB,EAAGV,EAAa,GAAI,QAMrE,MAEF,kBAACK,EAAD,KACE,kBAAC,EAAD,CAAaL,WAAYA,OCvBbgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.07ca054a.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nconst Track = styled.div`\n    width: 100%;\n    height: 20px;\n    background-color: white;\n    border-radius: 10px;\n    box-shadow: inset 0 0 5px #000;\n    border-color: '#fff';\n\n    padding-top: 4px;\n    padding-left: 3px;\n    padding-right: 3px;\n`\n\nconst Thumb = styled.div`\n    width: ${props => props.percentage}%;\n    height: 80%;\n    background-color: #6bccf9;\n    border-radius: 8px;\n    transition: width 0.3s ease-in-out;\n    \n    text-align: center;\n    line-height: 17px;\n    font-size: 12px;\n`\nconst ProgressBar = props => {\n    console.log(props.percentage)\n    return (\n        <Track>\n            <Thumb percentage={props.percentage} >\n                {props.percentage}%\n            </Thumb>\n        </Track>\n    )\n}\n\nProgressBar.propTypes = {\n    percentage: PropTypes.number\n}\n\n\nexport default ProgressBar","import React, { useState } from 'react';\n\nimport styled from 'styled-components'\n\nimport ProgressBar from './components/progress-bar/progressbar.component'\n\nconst AppWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\nconst ProgressBarContainer = styled.div`\n    width: 300px;\n    margin-top: 50px;\n`\nconst ButtonContainer = styled.div`\n    width: 300px;\n    margin-top: 100px;\n    text-align: center;\n`\n\nconst App = () => {\n  const [percentage, setPercentage] = useState(20)\n  const percentageLimits = (min, value, max) => {\n    return Math.min(Math.max(min, value), max)\n  }\n  const increment = () => setPercentage(percentageLimits(0, percentage + 10, 100))\n  const decrement = () => setPercentage(percentageLimits(0, percentage - 10, 100))\n  return (\n    <AppWrapper>\n      <ButtonContainer>\n        <button onClick={decrement}>-</button>\n        <button onClick={increment}>+</button>\n      </ButtonContainer>\n      <ProgressBarContainer>\n        <ProgressBar percentage={percentage} />\n      </ProgressBarContainer>\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}